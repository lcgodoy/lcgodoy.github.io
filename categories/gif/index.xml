<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>GIF | Academic</title>
    <link>/categories/gif/</link>
      <atom:link href="/categories/gif/index.xml" rel="self" type="application/rss+xml" />
    <description>GIF</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>© 2019</copyright><lastBuildDate>Tue, 24 Apr 2018 00:00:00 +0000</lastBuildDate>
    <image>
      <url>/img/logo2.png</url>
      <title>GIF</title>
      <link>/categories/gif/</link>
    </image>
    
    <item>
      <title>My first #TidyTuesday - A world map GIF</title>
      <link>/post/2018/04/2018-04-13-world_map_gig/</link>
      <pubDate>Tue, 24 Apr 2018 00:00:00 +0000</pubDate>
      <guid>/post/2018/04/2018-04-13-world_map_gig/</guid>
      <description>

&lt;h2 id=&#34;about-tidytuesday&#34;&gt;About TidyTuesday&lt;/h2&gt;

&lt;p&gt;Tidy Tuesday is a nice initiative from the &lt;a href=&#34;https://twitter.com/R4DScommunity&#34; target=&#34;_blank&#34;&gt;R4DS online community&lt;/a&gt;.
The goal is is to apply your R skills, get feedback, explore other’s work, and connect with the
greater RStats community.&lt;br /&gt;
It&amp;rsquo;s also my blogging motivation.&lt;/p&gt;

&lt;h2 id=&#34;the-challenge&#34;&gt;The challenge&lt;/h2&gt;

&lt;p&gt;This post is about the following challenge&lt;/p&gt;

&lt;p&gt;&lt;!--html_preserve--&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;&lt;a href=&#34;https://twitter.com/hashtag/r4ds?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#r4ds&lt;/a&gt; presents Week 3 of &lt;a href=&#34;https://twitter.com/hashtag/TidyTuesday?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#TidyTuesday&lt;/a&gt;! Let&amp;#39;s explore global causes of mortality!&lt;br&gt;&lt;br&gt;Make a meaningful graphic, and post your code!&lt;br&gt;&lt;br&gt;Data: &lt;a href=&#34;https://t.co/ygKv8PqOfI&#34;&gt;https://t.co/ygKv8PqOfI&lt;/a&gt;&lt;br&gt;Article: &lt;a href=&#34;https://t.co/MOnlCBzdaL&#34;&gt;https://t.co/MOnlCBzdaL&lt;/a&gt;&lt;br&gt;Blog: &lt;a href=&#34;https://t.co/cZJ94Hhz7U&#34;&gt;https://t.co/cZJ94Hhz7U&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/tidyverse?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#tidyverse&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/rstats?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#rstats&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/dataviz?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#dataviz&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/ggplot2?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#ggplot2&lt;/a&gt; &lt;a href=&#34;https://twitter.com/R4DScommunity?ref_src=twsrc%5Etfw&#34;&gt;@R4DScommunity&lt;/a&gt; &lt;a href=&#34;https://t.co/52rktsOcSQ&#34;&gt;pic.twitter.com/52rktsOcSQ&lt;/a&gt;&lt;/p&gt;&amp;mdash; Thomas Mock (@thomas_mock) &lt;a href=&#34;https://twitter.com/thomas_mock/status/985864534832402432?ref_src=twsrc%5Etfw&#34;&gt;April 16, 2018&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;!--/html_preserve--&gt;&lt;/p&gt;

&lt;p&gt;The dataset contains mortality rates for all countries from 1990 to 2016, the aim
was build a meaningful visualization. My idea was show the variation of a specific
cause of death through &lt;em&gt;space-time&lt;/em&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You can download the data from &lt;a href=&#34;https://github.com/rfordatascience/tidytuesday/blob/master/data/global_mortality.xlsx&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;ingredients&#34;&gt;Ingredients&lt;/h2&gt;

&lt;p&gt;To achieve my goal I used the packages:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;dplyr&lt;/code&gt; - data manipulation;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ggplot2&lt;/code&gt; - graphs;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ggthemes&lt;/code&gt; - map theme;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sf&lt;/code&gt; - spatial data manipulation. This package interacts beautifully with &lt;code&gt;ggplot2&lt;/code&gt;
and &lt;code&gt;dplyr&lt;/code&gt;, which makes spatial data manipulation and visualization very easy (and tidy);&lt;/li&gt;
&lt;li&gt;&lt;code&gt;magick&lt;/code&gt; - build the GIF&amp;rsquo;s;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;magrittr&lt;/code&gt; - it&amp;rsquo;s not just the &lt;code&gt;%&amp;gt;%&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;readxl&lt;/code&gt; - reading &lt;code&gt;.xlsx&lt;/code&gt; files;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;maps&lt;/code&gt; - world map &amp;lsquo;shape&amp;rsquo;.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://twitter.com/WireMonkey&#34; target=&#34;_blank&#34;&gt;Alyssa Goldberg&lt;/a&gt; suggestion:
You can use &lt;code&gt;gganimate&lt;/code&gt; instead of &lt;code&gt;magick&lt;/code&gt;, it will need fewer lines of code.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;reading-and-manipulating-the-data&#34;&gt;Reading and manipulating the data&lt;/h2&gt;

&lt;p&gt;The following code is used to read and make the first manipulations at the data
provided for the challenge. Here, &lt;code&gt;mutate&lt;/code&gt; and &lt;code&gt;case_when&lt;/code&gt;, are being used to
modify the names of some countries to coincide with country names at the
map that will be used.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(ggplot2)
library(dplyr)
library(sf)
library(magrittr)

data &amp;lt;- readxl::read_excel(&amp;quot;data/global_mortality.xlsx&amp;quot;) %&amp;gt;% 
  mutate(country = case_when(
    country == &#39;Antigua and Barbuda&#39; ~ &#39;Antigua&#39;,
    country == &#39;United States&#39; | country == &#39;United States and Virgin Islands&#39; ~ &#39;USA&#39;,
    country == &#39;United Kingdom&#39; ~ &#39;UK&#39;,
    country == &#39;England&#39; ~ &#39;UK&#39;,
    country == &#39;Scotland&#39; ~ &#39;UK&#39;,
    country == &#39;Trinidad and Tobago&#39; ~ &#39;Trinidad&#39;,
    TRUE ~ country
  ))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we need a map and merge our data with it. This would be a little bit more
difficult if we did not have the &lt;code&gt;sf&lt;/code&gt; package.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;world_map &amp;lt;- st_as_sf(maps::map(&#39;world&#39;, plot = FALSE, fill = TRUE))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then we will merge the data from the map with the data provided by the R4DS
challenge. Thank&amp;rsquo;s to &lt;code&gt;dplyr&lt;/code&gt; and &lt;code&gt;sf&lt;/code&gt;, we can do this with the following
lines of code. Here the variables &lt;code&gt;ID&lt;/code&gt; from &lt;code&gt;world map&lt;/code&gt; and &lt;code&gt;country&lt;/code&gt; from
&lt;code&gt;data&lt;/code&gt; must be equal at each country.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;map_years &amp;lt;- world_map %&amp;gt;% 
  full_join(data, by = c(&#39;ID&#39; = &#39;country&#39;))
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;creating-a-gif&#34;&gt;Creating a GIF&lt;/h2&gt;

&lt;h3 id=&#34;building-the-gif-map-function&#34;&gt;Building the &lt;code&gt;gif_map&lt;/code&gt; function&lt;/h3&gt;

&lt;p&gt;To make easier to create a &lt;em&gt;GIF&lt;/em&gt; for different causes of death, I built the following
function. The inputs are the data and a string representing the name of the variable
corresponding to the cause of death you want to visualize.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;gif_map &amp;lt;- function(data, cause_of_death) {
  # Create limits to fix the scales
  fill_lim &amp;lt;- range(data %$% get(cause_of_death), na.rm = T)
  
  # Split the data set for different years
  data_list &amp;lt;- split(data, data$year)
  
  out &amp;lt;- lapply(data_list, function(data, cause_of_death, fill_lim){
    p &amp;lt;- ggplot(data, aes(fill = get(cause_of_death))) +
      geom_sf(size = .2, color = &#39;black&#39;) +
      scale_fill_gradient(low = &amp;quot;#ffefef&amp;quot;, high = &amp;quot;#720000&amp;quot;, space = &amp;quot;Lab&amp;quot;,
                          na.value = &amp;quot;#c6c6c6&amp;quot;, guide = &amp;quot;colourbar&amp;quot;, 
                          limits = c(fill_lim[1], fill_lim[2]),
                          name = cause_of_death) +
      ggthemes::theme_map() +
      labs(title = paste(&#39;Year:&#39;, unique(data$year))) +
      theme(panel.grid.major = element_line(colour = &#39;gray&#39;, size = .2, linetype = &#39;dashed&#39;),
            legend.position = &#39;bottom&#39;)
    print(p)
  }, cause_of_death, fill_lim)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;using-it&#34;&gt;Using it&lt;/h3&gt;

&lt;p&gt;Now that we&amp;rsquo;ve already built a function, use it&amp;rsquo;s very easy.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Specifying the width, height and resolution
img &amp;lt;- magick::image_graph(width = 800, height = 350, res = 96)

# gif for Homicide mortality rate
gif_map(map_years, &amp;quot;Homicide (%)&amp;quot;)
dev.off()

# building a gif with 8 frames per second
animation &amp;lt;- magick::image_animate(img, fps = 8)

# Visualize it
print(animation)

# Save it
magick::image_write(animation, path = &#39;img/homicide.gif&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;/post/2018/04/2018-04-13-world_map_gig_files/figure-html/create_gif2.gif&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;gganimate-code-outdated&#34;&gt;&lt;code&gt;gganimate&lt;/code&gt; code (outdated)&lt;/h2&gt;

&lt;p&gt;There is an option to create the GIF with &lt;code&gt;gganimate&lt;/code&gt;, the syntax is very simple
and it is attached at the following block of code.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(gganimate)
ggplot(map_years, aes(fill = `Homicide (%)`, frame = years)) +
      geom_sf(size = .2, color = &#39;black&#39;) +
      scale_fill_gradient(low = &amp;quot;#ffefef&amp;quot;, high = &amp;quot;#720000&amp;quot;, space = &amp;quot;Lab&amp;quot;,
                          na.value = &amp;quot;#c6c6c6&amp;quot;, guide = &amp;quot;colourbar&amp;quot;) +
      ggthemes::theme_map() +
      labs(title = paste(&#39;Year:&#39;, unique(data$year))) +
      theme(panel.grid.major = element_line(colour = &#39;gray&#39;, size = .2, linetype = &#39;dashed&#39;),
            legend.position = &#39;bottom&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;final-remarks&#34;&gt;Final remarks&lt;/h2&gt;

&lt;p&gt;At this post, I showed how to build GIF’s considering space-time data with a few
lines of code. I hope that you enjoyed the post, and if you have any doubt or
consideration, you can contact me at twitter or email.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
