---
title: |
  Git \& friends
subtitle: |
  Available at [lcgodoy.me/slides/2025-git/](https://lcgodoy.me/slides/2025-git/)
author:
  - name: Lucas da Cunha Godoy
    orcid: 0000-0003-4265-972X
    email: |
      ldcgodoy@ucsc.com
    affiliations: EEB Department, UCSC
  - name: Maya Zeff
    email: |
      mayazeff@ucsc.edu 
date: 2025-02-03
bibliography: references.bib
csl: styles/asa.csl
format:
  revealjs:
    center: true
    theme: [styles/git.scss]
    filters:
      - styles/appendix.lua
    embed-resources: true
    self-contained-math: true
    toc: true
    toc-depth: 1
    smaller: false
    slide-number: c/t
    navigation-mode: linear
    highlight-style: tango
    code-overflow: wrap
---

# Introduction

## What is version control and why should I care?

- Imagine you're [writing a document]{.important}. Instead of just saving over
  the same file every time, [version control]{.important} keeps the file's
  [history]{.important}, like snapshots of your work.

![Does anyone relate to
this?](img/why-version-control.jpeg)

## Why is it useful?

- Why is this useful?

  * [Collaboration]{.important2}: Multiple people can work on the same project without
      overwriting each other's changes.
      
  * [Reverting]{.important2}: You can easily go back to a previous version if
      you make a mistake or want to try something different.
      
  * [Tracking History]{.important2}: You can see who made what changes and when.

## What is Git?

* Git is a *distributed* version control system. This means that everyone
  working on a project has a complete copy of the project's history on their own
  computer.

* It was created by Linus Torvalds (the creator of Linux) in 2005 because he
  needed a better way to manage the Linux kernel source code.

* The distributed nature of Git is a key benefit. If one person's computer
  crashes, the project history is safe because everyone else has a copy.


## Git vs GitHub and others

This is important: Git and GitHub are *not* the same thing.

*   [Git]{.important2}: The tool itself. It's the software you install on your
    computer to track changes to your files.

*   [GitHub]{.important2}: A website that hosts Git repositories.  It's a
    platform [built around Git]{.important}. Think of it like a [place to
    store]{.important} and share your [Git projects]{.important}.

* GitHub is very popular, but it's not the only option. Other platforms include:
  * GitLab
  * Bitbucket


## Downloading and installing

* You can download Git [here](https://git-scm.com/downloads)

* On MacOS, one can use `brew` or `port` to install it

* On Linux it depends on the package manager being used

* On Windows, this [link](https://gitforwindows.org/) provides git and a
  "terminal emulator" called Git BASH.


# A lightning intro to the `terminal`

## Why using the terminal?

* [Git's Best Friend]{.important2}: Git relies heavily on the command line
  (terminal).

* [Power and Flexibility]{.important2}: The terminal offers direct control over
  your computer, enabling complex tasks and automation not easily achievable
  through graphical interfaces.

* [High-Performance Computing]{.important2}: A must-have for HPC.

* [Not as Scary as it Looks]{.important2}: The terminal is simply a [text-based
  way]{.important} to [communicate]{.important} with your
  [computer]{.important}.  It's a skill worth learning!

## Basics

* `pwd` (print working directory): Tells you where you are in the file system.

* `ls` (list files): Shows you the files and folders in your current directory.

* `cd` (change directory): Moves you to a different folder.  For instance, 
  `cd ..` goes up one level.

* `mkdir` (make directory): Creates a new folder.

* `touch` (create a file): Creates an empty file (often used for quick testing).


# Basic Git workflow


## Initializing a repository


* A repository (often shortened to [repo]{.important}) is a directory/folder
  plus a hidden `.git` folder, which [stores]{.important} all the [version
  history]{.important}.

* There are [different ways]{.important} to start a [Git
  repository]{.important}.

    * We can create or turn an existing directory/folder into a Git repository.
    
    * To turn a folder into a git repository, open your terminal, navigate to
      the desired folder (using `cd`) and then type:

      ```bash
      git init
      ```

    * We can `clone` a git repository.
    
      ```bash
      git clone <repo-url>
      ```

## Staging changes


* Before you can save a version (called a [commit]{.important}), you need to
  tell Git which changes you want to include.  This is called
  [staging]{.important}

```bash
git add <file>  # e.g., git add my_document.txt
```

* If we replace `<file>` by `.`, then everything that was changed will be staged.

* To see what's been staged, use:

```bash
git status
```

## Committing changes & viewing history


* A [commit]{.important} saves your [staged changes]{.important}.

```bash
git commit -m "Descriptive message"
```

* The `-m` flag lets you [pair the staged changes]{.important} with a
  [message]{.important} describing the changes you made. 
  
  
* [Good commit messages are essential!]{.important} They help you and others
  understand the history of the project.

* To see the history of commits (the commit messages, author, and date of each
  commit), use:

```bash
git log
```

## The `.gitignore` file

* The `.gitignore` file is [text file]{.important} that [tells Git]{.important}
  which [files and directories to ignore]{.important}.  This prevents them from
  being accidentally added to your repository and keeps your commit history
  clean.

* [Exclude unnecessary files]{.important2}: Avoid committing temporary files,
  log files, or system-specific files that clutter your repository.

* [Protect sensitive data]{.important2}: Prevent accidentally committing
  passwords, API keys, or other confidential information.

* [Example `.gitignore`]{.important2}:

```
.DS_Store      # macOS file
*.tmp          # Temporary files
config.ini     # Sensitive configuration
my_secret_key  # Never commit secrets!
```


## Pushing & pulling

* [Pushing]{.important2}: Uploading your changes to a remote repository (like on
  GitHub). After a commit, to upload our changes to the remote repository, we run:
  
  ```bash
  git push
  ```

* [Pulling]{.important2}: Downloading changes from a remote repository to your
  local computer.
  
  ```bash
  git pull
  ```
  
* [Best practice]{.important2}: Run `git pull` before starting to edit a file to
  [avoid conflicts]{.important}.


## There is much more out there

* [Branches]{.important2}

* [Pull requests]{.important2} 

* [Merging]{.important2}

## Live example


# Conclusion

## Recap

* Version control helps you track changes to your files.

* Git is a powerful, distributed version control system.

* GitHub is a platform for hosting Git repositories.

* Basic commands: `init`, `add`, `commit`, `log`, `clone`.

## Resources

* [Official Git documentation](https://git-scm.com/doc)
  
* [Happy Git and GitHub for the useR](https://happygitwithr.com/)

* [Git practice](https://gitexercises.fracz.com/): more advanced exercises

## Next steps

* Experiment with Git! Create a simple project and try out the basic commands.

* Practice is key! The more you use Git, the more comfortable you'll become.

---

### References {visibility="uncounted"}

<div id="refs"></div>
